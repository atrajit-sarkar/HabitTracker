rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // ============================================================================
    // HELPER FUNCTIONS
    // ============================================================================
    
    // Check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Check if user is the owner of the resource
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Check if user is one of the participants
    function isParticipant(participants) {
      return isAuthenticated() && request.auth.uid in participants;
    }
    
    // Check if data exists
    function existingData() {
      return resource.data;
    }
    
    // Check if incoming data has required fields
    function hasRequiredFields(fields) {
      return request.resource.data.keys().hasAll(fields);
    }
    
    // Validate email format (basic check)
    function isValidEmail(email) {
      return email.matches('^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$');
    }
    
    
    // ============================================================================
    // USERS COLLECTION
    // Main user data including rewards, themes, settings, presence
    // ============================================================================
    
    match /users/{userId} {
      // Users can read their own data
      allow read: if isOwner(userId);
      
      // Users can create their own profile during signup
      allow create: if isOwner(userId);
      
      // Users can update their own data
      // Allow partial updates for specific fields
      allow update: if isOwner(userId);
      
      // Users cannot delete their main profile
      allow delete: if false;
      
      
      // ============================================================================
      // USER SUB-COLLECTIONS: HABITS
      // Personal habits data
      // ============================================================================
      
      match /habits/{habitId} {
        // Users can read their own habits
        allow read: if isOwner(userId);
        
        // Users can create their own habits
        allow create: if isOwner(userId) 
          && hasRequiredFields(['title', 'frequency', 'reminderHour', 'reminderMinute'])
          && request.resource.data.title is string
          && request.resource.data.title.size() > 0
          && request.resource.data.title.size() <= 100
          && request.resource.data.reminderHour >= 0 
          && request.resource.data.reminderHour <= 23
          && request.resource.data.reminderMinute >= 0 
          && request.resource.data.reminderMinute <= 59;
        
        // Users can update their own habits
        allow update: if isOwner(userId);
        
        // Users can delete their own habits
        allow delete: if isOwner(userId);
      }
      
      
      // ============================================================================
      // USER SUB-COLLECTIONS: COMPLETIONS
      // Habit completion tracking
      // ============================================================================
      
      match /completions/{completionId} {
        // Users can read their own completions
        allow read: if isOwner(userId);
        
        // Users can create their own completions
        allow create: if isOwner(userId)
          && hasRequiredFields(['habitId', 'completedDate'])
          && request.resource.data.completedDate is int;
        
        // Users can update their own completions
        allow update: if isOwner(userId);
        
        // Users can delete their own completions
        allow delete: if isOwner(userId);
      }
      
      
      // ============================================================================
      // USER SUB-COLLECTIONS: READ NEWS
      // Track which news articles user has read
      // ============================================================================
      
      match /read_news/{newsId} {
        // Users can read their own read news status
        allow read: if isOwner(userId);
        
        // Users can mark news as read
        allow create, update: if isOwner(userId);
        
        // Users can unmark news (delete read status)
        allow delete: if isOwner(userId);
      }
    }
    
    
    // ============================================================================
    // USER PROFILES COLLECTION
    // Public profile information for social features (friends, leaderboard)
    // ============================================================================
    
    match /userProfiles/{profileUserId} {
      // Anyone authenticated can read public profiles (for friend search, leaderboard)
      allow read: if isAuthenticated();
      
      // Users can create their own public profile
      allow create: if isOwner(profileUserId)
        && hasRequiredFields(['userId', 'email', 'displayName'])
        && isValidEmail(request.resource.data.email)
        && request.resource.data.displayName.size() > 0
        && request.resource.data.displayName.size() <= 50;
      
      // Users can update their own public profile
      allow update: if isOwner(profileUserId);
      
      // Users cannot delete their public profile (keep for data integrity)
      allow delete: if false;
    }
    
    
    // ============================================================================
    // FRIEND REQUESTS COLLECTION
    // Friend request management
    // ============================================================================
    
    match /friendRequests/{requestId} {
      // Users can read friend requests sent TO them or sent BY them
      allow read: if isAuthenticated() 
        && (request.auth.uid == resource.data.toUserId 
            || request.auth.uid == resource.data.fromUserId);
      
      // Users can create friend requests (sending requests)
      allow create: if isAuthenticated()
        && hasRequiredFields(['fromUserId', 'toUserId', 'fromUserEmail', 'fromUserName', 'status'])
        && request.resource.data.fromUserId == request.auth.uid
        && request.resource.data.fromUserId != request.resource.data.toUserId
        && request.resource.data.status == 'PENDING'
        && isValidEmail(request.resource.data.fromUserEmail)
        && request.resource.data.fromUserName.size() > 0;
      
      // Users can update friend requests (accept/reject)
      // Only the recipient can update the status
      allow update: if isAuthenticated()
        && request.auth.uid == resource.data.toUserId
        && request.resource.data.status in ['ACCEPTED', 'REJECTED', 'PENDING'];
      
      // Users can delete their own sent requests or received requests
      allow delete: if isAuthenticated()
        && (request.auth.uid == resource.data.fromUserId 
            || request.auth.uid == resource.data.toUserId);
    }
    
    
    // ============================================================================
    // FRIENDSHIPS COLLECTION
    // Established friendships
    // ============================================================================
    
    match /friendships/{friendshipId} {
      // Users can read:
      // 1. Friendships they are part of (for individual document reads)
      // 2. All friendships (for list/query operations needed for leaderboard)
      //    This is safe because friendships only expose user IDs, not sensitive data
      allow read: if isAuthenticated();
      
      // Users can create friendships (when accepting friend request)
      // This is typically done by the app after accepting a friend request
      allow create: if isAuthenticated()
        && hasRequiredFields(['user1Id', 'user2Id'])
        && (request.resource.data.user1Id == request.auth.uid 
            || request.resource.data.user2Id == request.auth.uid)
        && request.resource.data.user1Id != request.resource.data.user2Id;
      
      // Friendships should not be updated, only created or deleted
      allow update: if false;
      
      // Users can delete friendships they are part of (unfriend)
      allow delete: if isAuthenticated()
        && (request.auth.uid == resource.data.user1Id 
            || request.auth.uid == resource.data.user2Id);
    }
    
    
    // ============================================================================
    // CHATS COLLECTION
    // Chat conversations between users
    // ============================================================================
    
    match /chats/{chatId} {
      // Users can read chats they are participants of
      allow read: if isAuthenticated() 
        && request.auth.uid in resource.data.participants;
      
      // Users can create chats if they are one of the participants
      allow create: if isAuthenticated()
        && hasRequiredFields(['participants', 'participantNames'])
        && request.auth.uid in request.resource.data.participants
        && request.resource.data.participants.size() == 2
        && request.resource.data.participants[0] != request.resource.data.participants[1];
      
      // Users can update chats they are part of (update last message, unread count)
      allow update: if isAuthenticated() 
        && request.auth.uid in resource.data.participants;
      
      // Users can delete chats they are part of
      allow delete: if isAuthenticated() 
        && request.auth.uid in resource.data.participants;
      
      
      // ============================================================================
      // CHAT SUB-COLLECTIONS: MESSAGES
      // Individual messages within a chat
      // ============================================================================
      
      match /messages/{messageId} {
        // Users can read messages in chats they are participants of
        allow read: if isAuthenticated()
          && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
        
        // Users can create messages in chats they are participants of
        allow create: if isAuthenticated()
          && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants
          && hasRequiredFields(['senderId', 'content', 'timestamp'])
          && request.resource.data.senderId == request.auth.uid
          && request.resource.data.content.size() > 0
          && request.resource.data.content.size() <= 5000;
        
        // Users can update their own messages (edit)
        allow update: if isAuthenticated()
          && request.auth.uid == resource.data.senderId;
        
        // Users can delete their own messages
        allow delete: if isAuthenticated()
          && request.auth.uid == resource.data.senderId;
      }
    }
    
    
    // ============================================================================
    // APP NEWS COLLECTION
    // Application-wide news and announcements
    // ============================================================================
    
    match /app_news/{newsId} {
      // All authenticated users can read news
      allow read: if isAuthenticated();
      
      // Only admins/backend can create news (prevent client-side creation)
      // If you need client creation, change this to: if isAuthenticated()
      allow create: if false;
      
      // Only admins/backend can update news
      allow update: if false;
      
      // Only admins/backend can delete news
      allow delete: if false;
    }
    
    
    // ============================================================================
    // POSTS COLLECTION (if implemented)
    // Social feed posts (currently in patch, may not be active)
    // ============================================================================
    
    match /posts/{postId} {
      // All authenticated users can read posts
      allow read: if isAuthenticated();
      
      // Users can create their own posts
      allow create: if isAuthenticated()
        && request.resource.data.userId == request.auth.uid;
      
      // Users can update their own posts
      allow update: if isAuthenticated()
        && resource.data.userId == request.auth.uid;
      
      // Users can delete their own posts
      allow delete: if isAuthenticated()
        && resource.data.userId == request.auth.uid;
    }
    
    
    // ============================================================================
    // COMMENTS COLLECTION (if implemented)
    // Comments on posts (currently in patch, may not be active)
    // ============================================================================
    
    match /comments/{commentId} {
      // All authenticated users can read comments
      allow read: if isAuthenticated();
      
      // Users can create comments
      allow create: if isAuthenticated()
        && request.resource.data.userId == request.auth.uid;
      
      // Users can update their own comments
      allow update: if isAuthenticated()
        && resource.data.userId == request.auth.uid;
      
      // Users can delete their own comments
      allow delete: if isAuthenticated()
        && resource.data.userId == request.auth.uid;
    }
    
    
    // ============================================================================
    // USER SOCIAL PROFILES COLLECTION (if implemented)
    // Extended social profile data (currently in patch, may not be active)
    // ============================================================================
    
    match /user_social_profiles/{profileId} {
      // All authenticated users can read social profiles
      allow read: if isAuthenticated();
      
      // Users can create their own social profile
      allow create: if isAuthenticated()
        && request.resource.data.userId == request.auth.uid;
      
      // Users can update their own social profile
      allow update: if isAuthenticated()
        && resource.data.userId == request.auth.uid;
      
      // Users can delete their own social profile
      allow delete: if isAuthenticated()
        && resource.data.userId == request.auth.uid;
    }
    
    
    // ============================================================================
    // DEFAULT DENY RULE
    // Deny all access to any other collections not explicitly defined
    // ============================================================================
    
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
